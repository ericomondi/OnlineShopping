import { ChevronLeft, ChevronRight } from "lucide-react";

const [selectedSubcategory, setSelectedSubcategory] = useState<string>("");
const [subcategoryCarouselIndex, setSubcategoryCarouselIndex] = useState(0);

const fetchProductsByCategory = async (categoryName: string, subcategoryName?: string) => {
  try {
    setIsLoading(true);

    const category = categories.find(
      (cat) => cat.name.toLowerCase() === categoryName.toLowerCase()
    );

    if (!category) {
      setProducts([]);
      setIsLoading(false);
      return;
    }

    let url = `${import.meta.env.VITE_API_BASE_URL}/public/products?category_id=${category.id}&limit=50`;
    
    if (subcategoryName) {
      const subcategory = subcategories.find(
        (sub) => sub.name.toLowerCase() === subcategoryName.toLowerCase() && sub.category_id === category.id
      );
      if (subcategory) {
        url += `&subcategory_id=${subcategory.id}`;
      }
    }

    const response = await axios.get(url);
    setProducts(response.data.items || []);
  } catch (error) {
    console.error("Error fetching products:", error);
    setProducts([]);
  } finally {
    setIsLoading(false);
  }
};

const handleSubcategoryChange = (subcategoryName: string) => {
  setSelectedSubcategory(subcategoryName);
  fetchProductsByCategory(selectedCategory, subcategoryName);
};

const resetFilters = () => {
  setSelectedSubcategory("");
  setSearchTerm("");
  setPriceRange("all");
  setSortBy("featured");
  fetchProductsByCategory(selectedCategory);
};

const nextSubcategorySlide = () => {
  setSubcategoryCarouselIndex((prev) =>
    prev + 4 >= subcategories.length ? 0 : prev + 4
  );
};

const prevSubcategorySlide = () => {
  setSubcategoryCarouselIndex((prev) =>
    prev - 4 < 0 ? Math.max(0, subcategories.length - 4) : prev - 4
  );
};

const handleCategoryChange = (categoryName: string) => {
  setSelectedCategory(categoryName);
  setSelectedSubcategory("");
  fetchProductsByCategory(categoryName);

  const category = categories.find(
    (cat) => cat.name.toLowerCase() === categoryName.toLowerCase()
  );
  if (category) {
    fetchSubcategories(category.id);
  }
};

useEffect(() => {
  if (selectedCategory && categories.length > 0) {
    fetchProductsByCategory(selectedCategory, selectedSubcategory);

    const category = categories.find(
      (cat) => cat.name.toLowerCase() === selectedCategory.toLowerCase()
    );
    if (category) {
      fetchSubcategories(category.id);
    }
  }
}, [selectedCategory, categories, selectedSubcategory]);

const getCategoryIcon = (categoryName: string) => {
  const iconMap: Record<string, string> = {
    Electronics: "📱",
    Fashion: "👗",
    "Home & Garden": "🏠",
    Sports: "⚽",
    Books: "📚",
    Beauty: "💄",
    Laptops: "��",
    Smartphones: "📱",
    "PC Components": "🔧",
    Accessories: "🎧",
    "Gaming Laptops": "🎮",
    "Business Laptops": "💼",
    Ultrabooks: "💻",
    Workstations: "🖥️",
    "Android Phones": "📱",
    iPhones: "📱",
    "Budget Phones": "📱",
    Processors: "🔧",
    "Graphics Cards": "🎮",
    "Memory & Storage": "💾",
    Motherboards: "🔌",
    "Audio & Headphones": "🎧",
    "Keyboards & Mice": "⌨️",
    "Monitors & Displays": "🖥️",
    Networking: "📡",
  };
  return iconMap[categoryName] || "📦";
};

{/* Subcategories Section */}
{subcategories.length > 0 && (
  <div className="mb-8">
    <div className="flex items-center justify-between mb-6">
      <h2 className="text-2xl font-bold text-gray-900">
        Browse by Subcategory
      </h2>
      <button
        onClick={resetFilters}
        className="text-blue-600 hover:text-blue-700 font-medium text-sm"
      >
        Show All Categories
      </button>
    </div>

    {/* Subcategory Carousel */}
    <div className="relative">
      {/* Navigation Buttons */}
      {subcategories.length > 4 && (
        <>
          <button
            onClick={prevSubcategorySlide}
            className="absolute left-0 top-1/2 transform -translate-y-1/2 z-10 bg-white/80 hover:bg-white p-2 rounded-full shadow-lg transition-all duration-300 hover:scale-110"
          >
            <ChevronLeft className="w-6 h-6 text-gray-700" />
          </button>

          <button
            onClick={nextSubcategorySlide}
            className="absolute right-0 top-1/2 transform -translate-y-1/2 z-10 bg-white/80 hover:bg-white p-2 rounded-full shadow-lg transition-all duration-300 hover:scale-110"
          >
            <ChevronRight className="w-6 h-6 text-gray-700" />
          </button>
        </>
      )}

      {/* Subcategories Grid */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 overflow-hidden">
        {subcategories
          .slice(subcategoryCarouselIndex, subcategoryCarouselIndex + 4)
          .map((subcategory) => (
            <button
              key={subcategory.id}
              onClick={() => handleSubcategoryChange(subcategory.name)}
              className={`p-4 rounded-xl text-center transition-all duration-300 hover:scale-105 ${
                selectedSubcategory === subcategory.name
                  ? `bg-gradient-to-r ${categoryConfig.gradient} text-white shadow-lg`
                  : "bg-white/60 backdrop-blur-sm border border-white/20 hover:bg-white/80"
              }`}
            >
              <div className="text-2xl mb-2">
                {getCategoryIcon(subcategory.name)}
              </div>
              <h3 className="font-semibold text-sm">
                {subcategory.name}
              </h3>
              {subcategory.description && (
                <p className="text-xs mt-1 opacity-75">
                  {subcategory.description}
                </p>
              )}
            </button>
          ))}
      </div>

      {/* Carousel Indicators */}
      {subcategories.length > 4 && (
        <div className="flex justify-center mt-4 space-x-2">
          {Array.from({ length: Math.ceil(subcategories.length / 4) }).map(
            (_, index) => (
              <button
                key={index}
                className={`w-3 h-3 rounded-full transition-all duration-300 ${
                  index === Math.floor(subcategoryCarouselIndex / 4)
                    ? "bg-blue-600"
                    : "bg-gray-300 hover:bg-gray-400"
                }`}
                onClick={() => setSubcategoryCarouselIndex(index * 4)}
              />
            )
          )}
        </div>
      )}
    </div>
  </div>
)}

{/* Subcategory Filter */}
{subcategories.length > 0 && (
  <select
    value={selectedSubcategory}
    onChange={(e) => handleSubcategoryChange(e.target.value)}
    className="px-4 py-2 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all bg-white"
  >
    <option value="">All Subcategories</option>
    {subcategories.map((subcategory) => (
      <option key={subcategory.id} value={subcategory.name}>
        {subcategory.name}
      </option>
    ))}
  </select>
)}

<h2 className="text-2xl font-bold text-gray-900">
  {categoryConfig.title} Collection
  {selectedSubcategory && ` - ${selectedSubcategory}`}
</h2>

<div className="text-sm text-gray-500">
  Showing results for "{selectedCategory}"
  {selectedSubcategory && ` > ${selectedSubcategory}`}
</div> 